-- Active: 1747477117878@@127.0.0.1@5432@test@public
/*
                    @Procedural Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/

-- create function Procedure
CREATE Function emp_count ()
RETURNS INT
LANGUAGE SQL
AS
$$
 SELECT count(*) FROM employee

$$

-- call FUNCTION
SELECT emp_count();

-- create Delete function with no return
CREATE Function emp_delete ()
RETURNS void
LANGUAGE SQL
AS
$$
 DELETE FROM employee
  WHERE employee_id = 20;

$$

SELECT emp_delete();

-- Create function with parameter
CREATE Function emp_delete_by_id (id INT)
RETURNS void
LANGUAGE SQL
AS
$$
 DELETE FROM employee
  WHERE employee_id = id;

$$

SELECT emp_delete_by_id(19);

-- -----------function procedure plpgsql  create procedure----------------------------------------->

CREATE PROCEDURE remove_emp()
LANGUAGE plpgsql
AS
$$
 BEGIN
  DELETE FROM employee WHERE employee_id = 18;
 END

$$

-- run PROCEDURE
call remove_emp();

-- ----create procedure with var------
CREATE PROCEDURE remove_emp_var()
LANGUAGE plpgsql
AS
$$
-- declere var
DECLARE emp_id INT;

 BEGIN
  SELECT employee_id INTO emp_id FROM employee WHERE employee_id = 17;
  DELETE FROM employee WHERE employee_id = emp_id;
 END
$$

 call remove_emp_var();


 -- ----create procedure with var and parameter and show alert/console log------
CREATE PROCEDURE remove_emp_var_id(p_id INT)
LANGUAGE plpgsql
AS
$$
DECLARE
  emp_id INT;
BEGIN
  SELECT employee_id INTO emp_id FROM employee WHERE employee_id = p_id;
  DELETE FROM employee WHERE employee_id = emp_id;
  RAISE NOTICE 'This employee deleted!';
END;
$$;

 call remove_emp_var_id(15);

SELECT * FROM employee;